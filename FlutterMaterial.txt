				Flutter
.....................................................................................

What is Flutter?
	Flutter is a cross-platform UI toolkit that is designed to allow code reuse across operating systems such as iOS and Android, while also allowing applications to interface directly with underlying platform services.

	Flutter now a days to build Mobile(Android/IOS),Desktop(Windows,linux,Mac),Web applications.
	Flutter inspired from react with respect to coding style,Flutter is component driven(Widget) , tree model.

	Flutter apps are built using dart programming language.

	During development, Flutter apps run in a VM that offers stateful hot reload of changes without needing a full recompile.

	 For release, Flutter apps are compiled directly to machine code, whether Intel x64 or ARM instructions, or to JavaScript if targeting the web

	 The framework is open source, with a permissive BSD license, and has a thriving ecosystem of third-party packages that supplement the core library functionality.

Components of Flutter:
.....................

1.The layer model: The pieces from which Flutter is constructed.

2.Reactive user interfaces: A core concept for Flutter user interface development.

3.Widgets: The fundamental building blocks of Flutter user interfaces.

4.The rendering process: How Flutter turns UI code into pixels.

5.platform embedders: The code that lets mobile and desktop OSes execute Flutter apps.

Arichitectural layers:
......................

To the underlying operating system, Flutter applications are packaged in the same way as any other native application.

 A platform-specific embedder provides an entrypoint; coordinates with the underlying operating system for access to services like rendering surfaces, accessibility, and input; and manages the message event loop.

 The embedder is written in a language that is appropriate for the platform: 

	currently Java and C++ for Android, Objective-C/Objective-C++ for iOS and macOS, and C++ for Windows and Linux. 

	Using the embedder, Flutter code can be integrated into an existing application as a module, or the code may be the entire content of the application. Flutter includes a number of embedders for common target platforms

	At the core of Flutter is the Flutter engine, which is mostly written in C++ and supports the primitives necessary to support all Flutter applications. 
	The engine is responsible for rasterizing composited scenes whenever a new frame needs to be painted.

 	It provides the low-level implementation of Flutter’s core API, including graphics (through Impeller on iOS and coming to Android, and Skia on other platforms) text layout, file and network I/O, accessibility support, plugin architecture, and a Dart runtime and compile toolchain.

	The engine is exposed to the Flutter framework through dart:ui, which wraps the underlying C++ code in Dart classes. This library exposes the lowest-level primitives, such as classes for driving input, graphics, and text rendering subsystems.

	Typically, developers interact with Flutter through the Flutter framework, which provides a modern, reactive framework written in the Dart language. It includes a rich set of platform, layout, and foundational libraries, composed of a series of layers. Working from the bottom to the top.


1.Basic foundational classes, and building block services such as animation, painting, and gestures that offer commonly used abstractions over the underlying foundation.


2.The rendering layer provides an abstraction for dealing with layout. With this layer, you can build a tree of renderable objects.


3.You can manipulate these objects dynamically, with the tree automatically updating the layout to reflect your changes.

4.The widgets layer is a composition abstraction. Each render object in the rendering layer has a corresponding class in the widgets layer. 

5.In addition, the widgets layer allows you to define combinations of classes that you can reuse.

6.This is the layer at which the reactive programming model is introduced.

7.The Material and Cupertino libraries offer comprehensive sets of controls that use the widget layer’s composition primitives to implement the Material or iOS design languages.


Anatomy of an app
.................

Dart App

Composes widgets into the desired UI.
Implements business logic.
Owned by app developer

Framework 

Provides higher-level API to build high-quality apps (for example, widgets, hit-testing, gesture detection, accessibility, text input).
Composites the app’s widget tree into a scene.

Engine

Responsible for rasterizing composited scenes.

Provides low-level implementation of Flutter’s core APIs (for example, graphics, text layout, Dart runtime).

Exposes its functionality to the framework using the dart:ui API.

Integrates with a specific platform using the Engine’s Embedder API.

Embedder

Coordinates with the underlying operating system for access to services like rendering surfaces, accessibility, and input.
Manages the event loop.
Exposes platform-specific API to integrate the Embedder into apps.

Runner

Composes the pieces exposed by the platform-specific API of the Embedder into an app package runnable on the target platform.

Part of app template generated by flutter create, owned by app developer.
....................................................................................
			 Flutter Setup

1.Install:
 
1.Select your operating system ( Windows,MacOs,Linux,ChromeOS)

https://docs.flutter.dev/get-started/install

Suppose Your env is windows:
............................
1.FlutterSDK

1.download flutter sdk zip file
2.extract zip file where ever you want
3.set flutter folder into path - E:\softwares\flutter\bin
4.Test whether flutter has been set 
 open cmd prompt
where flutter dart
E:\softwares\flutter\bin\flutter
E:\softwares\flutter\bin\flutter.bat
E:\softwares\flutter\bin\dart
E:\softwares\flutter\bin\dart.bat

5.Run flutter doctor.
flutter doctor
Doctor summary (to see all details, run flutter doctor -v):
[√] Flutter (Channel stable, 3.13.6, on Microsoft Windows [Version 10.0.19045.3448], locale en-IN)
[√] Windows Version (Installed version of Windows is version 10 or higher)
[√] Android toolchain - develop for Android devices (Android SDK version 34.0.0)
[√] Chrome - develop for the web
[!] Visual Studio - develop Windows apps (Visual Studio Build Tools 2019 16.11.20)
    X The current Visual Studio installation is incomplete. Please reinstall Visual Studio.
[√] Android Studio (version 2022.3)
[√] IntelliJ IDEA Community Edition (version 2021.2)
[√] IntelliJ IDEA Community Edition (version 2022.1)
[√] VS Code, 64-bit edition (version 1.81.1)
[√] Connected device (3 available)
[√] Network resources

! Doctor found issues in 1 category.

Note: 
1.You must install Android studio and Android SDK.

D:\Android\Sdk  - SDK location.

2.you must install SDK Tools chain.
  Android SDK settings
     -Platform tools - must have been installed
     -SDK Tools - must have been installed

After installing you can see that
D:\Android\Sdk
 ->build-tools
 ->platform
 ->platform-tools

All tools must have been added in the env "PATH"

PATH
  D:\Android\Sdk
  D:\Android\Sdk\tools
  D:\Android\Sdk\tools\bin
  D:\Android\Sdk\platform-tools
  D:\Android

android studio location setup
flutter config --android-studio-dir=<directory> 
eg:
flutter config --android-studio-dir="D:\Program Files\Android\Android Studio"

Accepting licenses:You must run with admin privilage

flutter doctor --android-licenses

....

Flutter Project creations using various ide
1.vs code
2.Intellij idea
3.Android studio.

You can select any ide, but you have to install plugin for flutter.

Android studio.
 Go to plugins section, install flutter plugin and restart ide.


Create Flutter Project using Android Studio.

.....................................................................................

Steps to create and run flutter Project:
.........................................

1.Device or emulator.
2.Start android emulator.
3.create flutter project using android studio template.

Project Architecture:

flutterapp
  |
  android
  ios 
  web
  windows
  linux
  macos
 lib
  |
  source code- main.dart
 |
 pubspec.yaml
  

2.Publish the code into android emulator
.....................................................................................
			 Building User interfaces with Flutter
....................................................................................

In Flutter  fundamental building block is "Widget" , In React and React Native fundamental building block is "Component".

What is Widget? What is Component?
 
  Both are same only which represents "User interface"

Widget and Component are "Object".

Every UI element is Object which is called "Widget".

Widget describe what their "View" should look like given their current configuration and state.

In Flutter Widgets are "Configurable".

Lets say I want to display simple text on Screen...

What are the configuration is needed?

->Where to display that text - "Location" - Layout
->Size of the Text
->Style of the Text
->Color of the Text
etc.......

Native Development vs Flutter Development 

eg:
 Android vs Flutter Development.

In Android "the View" is fundation of every thing that shows up on the screen
"Button,toolbars,inputs every thing is view"
IN flutter the rough equivalent to a View is a "Widget"

Note:
 "Widgets dont map exactly to Android Views"

With Programming native (android) development is highly "Imperative Programming"
Where as "Flutter Programming is highly "Declarative"


Imperative Programming:

In the imperative style, you would typically go to ViewB’s owner and retrieve the instance b using selectors or with findViewById or similar, and invoke mutations on it (and implicitly invalidate it). For example:

ViewB b = findViewById("selector")
// Imperative style
b.setColor(red)
b.clearChildren()
ViewC c3 = new ViewC(...)
b.add(c3)


Declarative Programming:

// Declarative style
return ViewB(
  color: red,
  child: const ViewC(
    color:Yellow
    child: const ViewD()
  ),
);

Flutter vs native development

1.flutter is declarative
   more readable
2.native is imperative

1.flutter widgets are immutable
    
2.native widgets are mutable

if you have object, if you change object properties, the same object is updated over period of time => Mutable pattern.


if you have object, if you change object properties, the same object is updated over period of time , when ever update happens , it creates new object => Immutable pattern.

Immutablity is achived by "Delcarative Programming"

.....................................................................................

Hello World:
.............

In flutter , main.dart is starting point.


void main(){
  
}

Most of the core widgets are available in the material.dart package.

import 'package:flutter/material.dart';

Every Flutter app must have root Widget.

How to mount ui or root Widget.

runApp function

runApp(Widget app) 

Widget is super class of all Widget.

..........

import 'package:flutter/material.dart';

void main() {
  runApp(
    const Text("Hello",textDirection: TextDirection.ltr)
  );
}
out put :
 if you look at, it displays left most corner of the screen. if you want to display text properly, we need to add alignment(layout).

In Flutter every thing is Widget

 It can  visible or invisble widgets.

Invisible widgets are layout widgets(row,column,center etc...)


import 'package:flutter/material.dart';

void main() {
  runApp(const Center(
    child: Text(
      "Hello",
      textDirection: TextDirection.ltr,
      style: TextStyle(color: Colors.cyan),
    ),
  ));
}
....................................................................................
				 Types of Widget
....................................................................................

Note: runApp function must take only root Widget.

1.StatelessWidget
2.Statefull Widget


Stateless widget:
 A widget does not require any mutable state(data).
 A Sateless widget describes "static User interface"

Statefull Widget
 A widget requires mutable state(data) and biz logic.
 A Statefull widget describes "Dynamic User interface"

Any widget is class 

How to create Statell widget?

class App extends StatelessWidget {
  
}

import 'package:flutter/material.dart';

//
class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text(
        "Hello Stateless Widget!",
        textDirection: TextDirection.ltr,
        style: TextStyle(color: Colors.cyan),
      ),
    );
  }
}

void main() {
  runApp(const App());
}


build method returns Widget which describes UI.
.....................................................................................

Tree Model of Widgets:
import 'package:flutter/material.dart';


class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    return const HelloWorldWidget();
  }
}

class HelloWorldWidget extends StatelessWidget {
  const HelloWorldWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text(
        "Hello World",
        textDirection: TextDirection.ltr,
        style: TextStyle(color: Colors.cyan),
      ),
    );
  }
}

void main() {
  runApp(const App());
}
................................................................................

Inside lib folder

lib/HelloWorld.dart
import 'package:flutter/material.dart';

class HelloWorldWidget extends StatelessWidget {
  const HelloWorldWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text(
        "Hello World!!!",
        textDirection: TextDirection.ltr,
        style: TextStyle(color: Colors.cyan),
      ),
    );
  }
}


lib/App.dart
import 'package:flutter/material.dart';
import 'package:flutterapps/HelloWorld.dart';

class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    return const HelloWorldWidget();
  }
}

lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutterapps/App.dart';

void main() {
  runApp(const App());
}
.....................................................................................
			        Basic Widgets
....................................................................................
Flutters provides tons of widgets and each widget has tons of properties

Widgets classification:

1.Structural elements/Widgets

Text,Button,Image,Menus,Drawer,Tab etc.......

2.Styltitics Widgets/Elements
  Font,Color,Border,Box etc........

3.Layout Elements/Widgets
  Row,Column,Center,Container,Stack,Scaffold etc......

1.Text 
    The Text Widget lets you create a simple styled Lables
Text(
        "Hello World!!!",
        textDirection: TextDirection.ltr,
        style: TextStyle(
            color: Colors.cyan,
            fontSize: 50.0,
            fontWeight: FontWeight.bold,
            backgroundColor: Colors.red),
      )


2.Row,Column:
    These are flex widgets(Flexiable widgets) which organizes the other widgets either horizontaly(Row), and Vertical(column) directions.
    These layouts are inspired from web flex box layout
import 'package:flutter/material.dart';

class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
        child: Row(
      children: [
        Expanded(
            child: Text("Google",
                style:
                    TextStyle(color: Colors.red, backgroundColor: Colors.red),
                textAlign: TextAlign.center,
                textDirection: TextDirection.ltr)),
        Expanded(
            child: Text("Microsoft",
                textAlign: TextAlign.center, textDirection: TextDirection.ltr)),
        Expanded(
            child: Text("Facebook",
                textAlign: TextAlign.center, textDirection: TextDirection.ltr))
      ],
    ));
  }
}

In the above UI is invisible , it is really to track how to put the elements position
.....................................................................................
What if i dont want into trouble in the basic layouting structure, i need some kind of template.

Solution Material Components:
.............................

Flutter provides a number widgets that help to build apps that follow material design.

in order to give boiler plate basic layouts of any screen size , material provides core widget called MaterialApp.

MaterialApp:

It is Top level Widget
It is entry point of any screen in flutter app


MaterailApp(

)

Basic Material App:

import 'package:flutter/material.dart';

class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "My Pet App",
      home: MyPetHome(),
    );
  }
}

class MyPetHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return const Center(
        child: Text("My Pet App", textDirection: TextDirection.ltr));
  }
}

Row or Column with Material:
............................
class MyPetHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
        child: Row(
      children: [
        Expanded(
            child: Text("Google",
                style: TextStyle(color: Colors.red),
                textAlign: TextAlign.center,
                textDirection: TextDirection.ltr)),
        Expanded(
            child: Text("Microsoft",
                textAlign: TextAlign.center, textDirection: TextDirection.ltr)),
        Expanded(
            child: Text("Facebook",
                textAlign: TextAlign.center, textDirection: TextDirection.ltr))
      ],
    ));
  }
}
....................................................................................
				Scaffold
...................................................................................

 a scaffold is any temporary elevated or suspended work surface

Scaffolding in flutter provides many widgets with structure, with template,
etc AppBar,Drawer,BottomNavigation,Floatting Action Button,.......


Structure of a Page:

 MaterialApp(
   title:''
   home:Scaffold(
     appBar:
     
   )
 ).
..............
Level -1 :
 App
  |
  MaterialApp
   |
   scaffold
     |
     AppBar
     |
     body
       |
       Center
	 |
	 Column
	   |
	   DecoratedBox	
		|
	     Padding
		|
		Text

import 'package:flutter/material.dart';

class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Dog App",
      home: Scaffold(
          appBar: AppBar(
            title: const Text("Dog App", textAlign: TextAlign.center),
          ),
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 1"),
                  ),
                ),
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 2"),
                  ),
                ),
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 3"),
                  ),
                )
              ],
            ),
          )),
    );
  }
}

Level 2: Adding space among Each Element:

SizedBox(
  height: 8.0,
)

import 'package:flutter/material.dart';

class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Dog App",
      home: Scaffold(
          appBar: AppBar(
            title: const Text("Dog App", textAlign: TextAlign.center),
          ),
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 1"),
                  ),
                ),
                SizedBox(
                  height: 8.0,
                ),
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 2"),
                  ),
                ),
                SizedBox(
                  height: 8.0,
                ),
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 3"),
                  ),
                )
              ],
            ),
          )),
    );
  }
}

Level 3: Adjusting axis position:
................................
Either column or row based:

mainAxisAlignment: MainAxisAlignment.end,
mainAxisAlignment: MainAxisAlignment.spaceEvenly,


import 'package:flutter/material.dart';

class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Dog App",
      home: Scaffold(
          appBar: AppBar(
            title: const Text("Dog App", textAlign: TextAlign.center),
          ),
          body: Center(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 1"),
                  ),
                ),
                SizedBox(
                  height: 8.0,
                ),
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 2"),
                  ),
                ),
                SizedBox(
                  height: 8.0,
                ),
                DecoratedBox(
                  decoration: BoxDecoration(color: Colors.lightGreen),
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text("Puppy 3"),
                  ),
                )
              ],
            ),
          )),
    );
  }
}
.....................................................................................

In the above code, "childrens are duplicated" - How to reuse code.

import 'package:flutter/material.dart';

class App extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Dog App",
      home: Scaffold(
          appBar: AppBar(
            title: const Text("Dog App", textAlign: TextAlign.center),
          ),
          body: Center(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                DogName("Puppy 1"),
                DogName("Puppy 2"),
                DogName("Puppy 3")
              ],
            ),
          )),
    );
  }
}

class DogName extends StatelessWidget {
  final String dogName;

  const DogName(this.dogName);

  @override
  Widget build(BuildContext context) {
    return DecoratedBox(
      decoration: BoxDecoration(color: Colors.lightGreen),
      child: Padding(padding: EdgeInsets.all(8.0), child: Text(dogName)),
    );
  }
}
....................................................................................
How to disable/hide debug flag?

MaterialApp(
      title: "Dog App",
      debugShowCheckedModeBanner: false,
      home: Scaffold(
          appBar: AppBar(
            title: const Text("Dog App", textAlign: TextAlign.center),
          ),
          body: Center(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                DogName("Puppy 1"),
                DogName("Puppy 2"),
                DogName("Puppy 3")
              ],
            ),
          )),
    );
.....................................................................................
			   Building layouts
.....................................................................................

How to begin with layoutting your app?

1.Have UX design blue prints
2.Start with Basic layout
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
// import 'package:flutterapps/App.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Fluter App",
      home: Scaffold(
          appBar: AppBar(
            title: const Text("Fluter App"),
          ),
          backgroundColor: Colors.white,
          body: const Center(
            child: Text("Your App content"),
          )),
    );
  }
}

Step 3:Diagram Layout

=>identify the rows and columns
=>Does this layout include grid
=>Are any overloapping elements
=>do you need tab
=>Identify the area that require alignment,padding,borers

How to implment title Row:
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
// import 'package:flutterapps/App.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: "Fluter App",
        debugShowCheckedModeBanner: false,
        home: Scaffold(
            appBar: AppBar(
              title: const Text("Tourist Places"),
            ),
            backgroundColor: Colors.white,
            body: Container(
              padding: const EdgeInsets.all(32),
              child: Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        /*2*/
                        Container(
                          padding: EdgeInsets.only(bottom: 8),
                          child: const Text(
                            "Taj Mahal",
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ),
                        Text(
                          "Agra,India",
                          style: TextStyle(color: Colors.grey[500]),
                        ),
                      ],
                    ),
                  ),
                  Expanded(
                     child: Column(
                    children: [Icon(Icons.star, color: Colors.red)],
                  ))
                ],
              ),
            )));
  }
}

How to refactor the above code? How to build layouts with isloated 

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
// import 'package:flutterapps/App.dart';

void main() => runApp(MyApp());

//Title Widget
Widget titleSectionWidget = Container(
  padding: const EdgeInsets.all(32),
  child: Row(
    children: [
      Expanded(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            /*2*/
            Container(
              padding: EdgeInsets.only(bottom: 8),
              child: const Text(
                "Taj Mahal",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              "Agra,India",
              style: TextStyle(color: Colors.grey[500]),
            ),
          ],
        ),
      ),
      Expanded(
          child: Column(
        children: [Icon(Icons.star, color: Colors.red)],
      ))
    ],
  ),
);

class buildButtonColumn extends StatelessWidget {
  final Color color;
  final IconData icon;
  final String label;

  const buildButtonColumn(this.color, this.icon, this.label);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, color: color),
        Container(
          margin: const EdgeInsets.only(top: 8),
          child: Text(
            label,
            style: TextStyle(
                fontSize: 12, fontWeight: FontWeight.w400, color: color),
          ),
        )
      ],
    );
  }
}

Color color = Colors.blue;
//Button Section
Widget buttonSection = Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    buildButtonColumn(color, Icons.call, 'CALL'),
    buildButtonColumn(color, Icons.near_me, 'ROUTE'),
    buildButtonColumn(color, Icons.share, 'SHARE'),
    buildButtonColumn(color, Icons.access_alarm, 'ALARM')

  ],
);

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: "Fluter App",
        debugShowCheckedModeBanner: false,
        home: Scaffold(
            appBar: AppBar(
              title: const Text("Tourist Places"),
            ),
            backgroundColor: Colors.white,
            body: Column(children: [titleSectionWidget, buttonSection])));
  }
}
..

Final Code:
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
// import 'package:flutterapps/App.dart';

void main() => runApp(MyApp());

//Title Widget
Widget titleSectionWidget = Container(
  padding: const EdgeInsets.all(32),
  child: Row(
    children: [
      Expanded(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            /*2*/
            Container(
              padding: EdgeInsets.only(bottom: 8),
              child: const Text(
                "Taj Mahal",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              "Agra,India",
              style: TextStyle(color: Colors.grey[500]),
            ),
          ],
        ),
      ),
      Expanded(
          child: Column(
        children: [Icon(Icons.star, color: Colors.red)],
      ))
    ],
  ),
);

class buildButtonColumn extends StatelessWidget {
  final Color color;
  final IconData icon;
  final String label;

  const buildButtonColumn(this.color, this.icon, this.label);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, color: color),
        Container(
          margin: const EdgeInsets.only(top: 8),
          child: Text(
            label,
            style: TextStyle(
                fontSize: 12, fontWeight: FontWeight.w400, color: color),
          ),
        )
      ],
    );
  }
}

Color color = Colors.blue;
//Button Section
Widget buttonSection = Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    buildButtonColumn(color, Icons.call, 'CALL'),
    buildButtonColumn(color, Icons.near_me, 'ROUTE'),
    buildButtonColumn(color, Icons.share, 'SHARE'),
    buildButtonColumn(color, Icons.access_alarm, 'ALARM')
  ],
);
const String text =
    " The Taj Mahal is an ivory-white marble mausoleum on the right bank of the river Yamuna in Agra,"
    " Uttar Pradesh, India. It was commissioned in 1631 by the fifth Mughal emperor, "
    "Shah Jahan to house the tomb of his beloved wife, Mumtaz Mahal;"
    " it also houses the tomb of Shah Jahan himself";
Widget textSection = Container(
  padding: const EdgeInsets.all(32),
  child: const Text(
    text,
    softWrap: true,
  ),
);

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: "Fluter App",
        debugShowCheckedModeBanner: false,
        home: Scaffold(
            appBar: AppBar(
              title: const Text("Tourist Places"),
            ),
            backgroundColor: Colors.white,
            body: ListView(children: [
              Image.asset(
                'images/1.jpg',
                width: 600,
                height: 240,
                fit: BoxFit.cover,
              ),
              titleSectionWidget,
              buttonSection,
              textSection
            ])));
  }
}
.....................................................................................
			 How to handle images in Flutter
.....................................................................................
Flutter app can include both code and assets which is other wise called "resources"

What is asset?
 An asset is a file that is bundled and deployed with your app and accessible at runtime. 

Common types of assets:
1.JSON File
2.configuration files
3.icons
4.images(jpeg,webp,gif,png,bmt,wbmp)

How to add or configures assets into application?

Flutter uses the pubspec.yaml file, located at the root of your project, to identify assets required by an app.

pubspec.yaml

Syntax:
flutter:
  assets:
    -assets/logo.png
    -assets/images/logo.png

eg:
flutter:
  assets:
    [images/1.jpg]


Loding images into app:

1. Image(image:AssetImage('assets/images/logo.png'))
2. Image.asset('images/logo.png')

We can load images from network

Image.network('http:www.example.com/logo.png')


eg:
 	    Image.asset(
                'images/1.jpg',
                width: 600,
                height: 240,
                fit: BoxFit.cover,
              )

...................................................................................

Full Layout :
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
// import 'package:flutterapps/App.dart';

void main() => runApp(MyApp());

//Title Widget
Widget titleSectionWidget = Container(
  padding: const EdgeInsets.all(32),
  child: Row(
    children: [
      Expanded(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            /*2*/
            Container(
              padding: EdgeInsets.only(bottom: 8),
              child: const Text(
                "Taj Mahal",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              "Agra,India",
              style: TextStyle(color: Colors.grey[500]),
            ),
          ],
        ),
      ),
      Expanded(
          child: Column(
            children: [Icon(Icons.star, color: Colors.red)],
          ))
    ],
  ),
);

class buildButtonColumn extends StatelessWidget {
  final Color color;
  final IconData icon;
  final String label;

  const buildButtonColumn(this.color, this.icon, this.label);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, color: color),
        Container(
          margin: const EdgeInsets.only(top: 8),
          child: Text(
            label,
            style: TextStyle(
                fontSize: 12, fontWeight: FontWeight.w400, color: color),
          ),
        )
      ],
    );
  }
}

Color color = Colors.blue;
//Button Section
Widget buttonSection = Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    buildButtonColumn(color, Icons.call, 'CALL'),
    buildButtonColumn(color, Icons.near_me, 'ROUTE'),
    buildButtonColumn(color, Icons.share, 'SHARE'),
    buildButtonColumn(color, Icons.access_alarm, 'ALARM')
  ],
);
const String text =
    " The Taj Mahal is an ivory-white marble mausoleum on the right bank of the river Yamuna in Agra,"
    " Uttar Pradesh, India. It was commissioned in 1631 by the fifth Mughal emperor, "
    "Shah Jahan to house the tomb of his beloved wife, Mumtaz Mahal;"
    " it also houses the tomb of Shah Jahan himself";
Widget textSection = Container(
  padding: const EdgeInsets.all(32),
  child: const Text(
    text,
    softWrap: true,
  ),
);

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: "Fluter App",
        debugShowCheckedModeBanner: false,
        home: Scaffold(
            appBar: AppBar(
              title: const Text("Tourist Places"),
            ),
            backgroundColor: Colors.white,
            body: ListView(children: [
              Image.asset(
                'images/1.jpg',
                width: 600,
                height: 240,
                fit: BoxFit.cover,
              ),
              titleSectionWidget,
              buttonSection,
              textSection
            ])));
  }
}
.....................................................................................
			     	Lists
....................................................................................

Displaying list of data is fundamental widget in mobile apps

Flutter includes "ListView" widget to with list items.


How to create ListView:
.......................

ListView(
 children: const <Widget>[
   ListTitle(
     leading:Icon(Icons.contact)
     title:Text('A')
  ),
   ListTitle(
  leading:Icon(Icons.contact)
     title:Text('A')
  ),
   ListTitle(
  leading:Icon(Icons.contact)
     title:Text('A')
   )
 ]
)

eg:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Basic List Demo',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Basic List Demo'),
        ),
        body: ListView(
          children: const <Widget>[
            ListTile(
              leading: Icon(Icons.map),
              title: Text("Map"),
            ),
            ListTile(
              leading: Icon(Icons.photo_album),
              title: Text('Albums'),
            ),
            ListTile(
              leading: Icon(Icons.phone),
              title: Text('Phone'),
            )
          ],
        ),
      ),
    );
  }
}
....................................................................................
			     Grid List - GridView
..................................................................................

What if i want to display your items as a grid rater than a normal list of items that comes one after another - GridView Widget.

How to begin GridView?

 GridView.count() constructor, because you must know how many rows and columns you would like to add.

Eg:
Create Grid with 2 columns. if you change scrollDirection to horizontal, this produces 2 rows
GridView.count(
   crossAxisCount:2
   children: [] //List of items
)

eg:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Grid",
      home: Scaffold(
        appBar: AppBar(title: const Text('Grid')),
        body: GridView.count(
          crossAxisCount: 2,
          children: List.generate(100, (index) {
            return Center(
              child: Text('Item $index'),
            );
          }),
        ),
      ),
    );
  }
}
.....................................................................................
			 List with Sections,Headings
.....................................................................................

1.Create a datasource with different types of items
2.Convert the data source into a list of widgets.



How to break list Widget into composable pattern:

1.List items:

abstract class ListItem{

}
class HeadingItem implements ListItem{

}
class MessageItem implements Listem{

}

create List of Items:

const items = List<Listem>.generate(100,i =>{})

Convert the datasource into list of widgets.

ListView.builder(
 itemCount:items.length
 itemBuilder:(context,index){
    final item = items[index]
    return ListTitle(title:item.buildItem(context),subtitle:item.buildSubtitle    (context))
 }
)

eg:
//Section List
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp(
    items: List<ListItem>.generate(1000, (index) {
      return (index % 6 == 0)
          ? HeadingItem("Heading $index")
          : MessageItem("Sender $index", "Message body $index");
    }),
  ));
}

class MyApp extends StatelessWidget {
  final List<ListItem> items;

  const MyApp({super.key, required this.items});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Section List',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Section List'),
        ),
        body: ListView.builder(
            itemCount: items.length,
            itemBuilder: (context, index) {
              final item = items[index];
              return ListTile(
                title: item.buildTitle(context),
                subtitle: item.buildSubTitle(context),
              );
            }),
      ),
    );
  }
}

abstract class ListItem {
  Widget buildTitle(BuildContext context);

  Widget buildSubTitle(BuildContext context);
}

//A Listem that contains data to display a heading
class HeadingItem implements ListItem {
  final String heading;

  HeadingItem(this.heading);

  @override
  Widget buildSubTitle(BuildContext context) => const SizedBox.shrink();

  @override
  Widget buildTitle(BuildContext context) {
    return Text(
      heading,
      style: Theme.of(context).textTheme.headlineSmall,
    );
  }
}

//A ListItem that contains data to a display message
class MessageItem implements ListItem {
  final String sender;
  final String body;

  MessageItem(this.sender, this.body);

  @override
  Widget buildSubTitle(BuildContext context) => Text(sender);

  @override
  Widget buildTitle(BuildContext context) => Text(body);
}
.....................................................................................
			 StateFull Widget
....................................................................................

What is StateFull widget?

 A StateFull widget has its own mutable state that it needs to track.
 It is modified according to user input.
 Statfull widgets does some things
 -The changed stated based on its previous state and updated view of the user    
  interface
 -When ever state is changed, the ui tree is rebuilt and re rendered
 -A Statefull Widget triggers a build method for creating its childern widgets and  sub class of the state holds the related data.

StateFull Widget Usecases:
 1.if there is any user input is needed
 2.There is dynamic changes like api calls and websockets.

How to create StateFull widget?
  
class MyClass extends StateFullWidget {
	
  @override
  State<MyClass> createState()=>_MyAppState()
}
class _MyAppState extends State<MyClass> {

   Widget build(BuildContext context){
	return Container()
   }
}

Step 0: Creating statefull Widget:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'StateFull Widget',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('StateFull'),
        ),
      ),
    );
  }
}
...................................................................................
			 Add a button and attach listener
...................................................................................

We have to add Listener inside State class.

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  //declare state variable which is going to change the update the ui
  int _counter = 0;

  //Listener
  void _onPressed() {
    print("Button is clicked");
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'StateFull Widget',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('StateFull'),
        ),
        body: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
                onPressed: _onPressed, child: const Text("increment"))
          ],
        ),
      ),
    );
  }
}
...................................................................................
			How to update state
...................................................................................

Methods from StateFull widget:

1.SetState()
  Which updates the state, whenever the state is updated ,Flutter rebuild the UI for updating lastest state.

setState(callback fun)

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  //declare state variable which is going to change the update the ui
  int _counter = 0;

  //Listener
  void _onPressed() {
    print("Button is clicked");
    setState(() {
      //This call to setState tells the fluttr that has changed in this state, which causes it re run the build below
      // so that the display can reflect the updated values. if change counter without setState, which will not
      //trigger build method, if no build is triggered, then ui will not be updated
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    print("build is called");
    return MaterialApp(
      title: 'StateFull Widget',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('StateFull'),
        ),
        body: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
                onPressed: _onPressed, child: const Text("increment")),
            const SizedBox(width: 16),
            Text("Counter $_counter")
          ],
        ),
      ),
    );
  }
}
.....................................................................................
			 Adding Multiple Listener 
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  //declare state variable which is going to change the update the ui
  int _counter = 0;

  //Listener
  void _onPressed() {
    print("Button is clicked");
    setState(() {
      //This call to setState tells the fluttr that has changed in this state, which causes it re run the build below
      // so that the display can reflect the updated values. if change counter without setState, which will not
      //trigger build method, if no build is triggered, then ui will not be updated
      _counter++;
    });
  }

  void _onDecrement() {
    setState(() {
      _counter--;
    });
  }

  @override
  Widget build(BuildContext context) {
    print("build is called");
    return MaterialApp(
      title: 'StateFull Widget',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('StateFull'),
        ),
        body: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
                onPressed: _onPressed, child: const Text("increment")),
            const SizedBox(width: 16),
            ElevatedButton(
                onPressed: _onDecrement, child: const Text("decrement")),
            const SizedBox(width: 16),
            Text("Counter $_counter")
          ],
        ),
      ),
    );
  }
}

Other Usefull methods from the StateFull Widgets:
.................................................

1.initState
  This is entry point of a widget , used to initalize the state firstTime.

2.didChangeDependencies:
  It is used for loading the dependencies required for execution of a state.
3.dispose 
  For writing resource clean activities.
...................................................................................
			 API integration In flutter
...................................................................................

Any front end application need to talk to the api servers in order get data.

All Flutter widgets mostly provided by flutter itself.
if you want any extra features like http interaction, we need to install those packages.

Third party packages:
https://pub.dev/packages/http

http:
A composable, Future-based library for making HTTP requests.
This package contains a set of high-level functions and classes that make it easy to consume HTTP resources. It's multi-platform, and supports mobile, desktop, and the browser.

How to bring http package?

 flutter pub add http

Steps:

1. flutter pub add http

2. import http package
  import 'package:http/http.dart'  as http;

Add Permissions in respective platforms for production(AndroidManifest.xml)
3. <user-permission android:name="android.permission.INTERNET">

4.Make a http Request.
 
 Future<http.Response> fetchAlbum() {
      return http.get('url')  
 } 
 http.get method returns a Future that contains a Response.
 http.Response class contains the data received from a successfull http call.
 Response is raw data we need to map to dart specific.

5.Convert the Response into a Custom Dart Object
  "http.Response" ===> Dart Object

  Entity class
class Album {
  final int userId;
  final int id;
  final String title;

  const Album({required this.userId, required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(userId: json['userId'], id: json['id'], title: json['title']);
  }
}

 
Future<Album> fetchAlbum() async {
  final response = await http
      .get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1'));

  if (response.statusCode == 200) {
    //Convert response into JSON
    return Album.fromJson(jsonDecode(response.body));
  } else {
    throw Exception('faild');
  }
}
 
6.FetchData : inside statefull Widget

 call fetchAlbum function within initState metod or didChangeDependencies().

class _MyAppState extends State<MyApp> {
  late Future<Album> futureAlbum;

  @override
  void initState(){
      super.initState();
      future = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'StateFull Widget',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('StateFull'),
        ),
      ),
    );
  }
}

7.Display the data on the screen. we need to use Sepcial widget.
  "FutureBuilder" Widget.

 FutureBuilder is part of Flutter framework and makes it easy to work with asyn operations.

 FutureBuilder<Album>(future:futureAlbum,
  
   builder:(contex,snapshot){
      if(snapshot.hasData){
	   return Text(snapshot.data!.title)
       }else{
 	 return Text('error')
       }
      //display spinner
      return const CircularProgressIndicator();
   }

 )

.
Full Code:
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Album> fetchAlbum() async {
  final response = await http
      .get(Uri.parse('https://jsonplaceholder.typicode.com/albums/2'));

  if (response.statusCode == 200) {
    //Convert response into JSON
    return Album.fromJson(jsonDecode(response.body));
  } else {
    throw Exception('faild');
  }
}

class Album {
  final int userId;
  final int id;
  final String title;

  const Album({required this.userId, required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(userId: json['userId'], id: json['id'], title: json['title']);
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late Future<Album> futureAlbum;

  @override
  void initState() {
    super.initState();
    futureAlbum = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'API Call',
      home: Scaffold(
        appBar: AppBar(title: const Text('API call')),
        body: Center(
          child: FutureBuilder<Album>(
              future: futureAlbum,
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Text(snapshot.data!.title);
                } else {
                  return Text('Something went wrong');
                }
                //show progressbar
                return const CircularProgressIndicator();
              }),
        ),
      ),
    );
  }
}
.......

List of items from internet:

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<List<Album>> fetchAlbums() async {
  final response =
      await http.get(Uri.parse('https://jsonplaceholder.typicode.com/albums'));

  List responseJson = json.decode(response.body);
  if (response.statusCode == 200) {
    return responseJson.map((m) => Album.fromJson(m)).toList();
  } else {
    throw Exception('faild');
  }
}

class Album {
  final int userId;
  final int id;
  final String title;

  const Album({required this.userId, required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(userId: json['userId'], id: json['id'], title: json['title']);
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late Future<List<Album>> futureAlbum;

  @override
  void initState() {
    super.initState();
    futureAlbum = fetchAlbums();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'API Call',
      home: Scaffold(
        appBar: AppBar(title: const Text('API call')),
        body: Center(
          child: FutureBuilder<List<Album>>(
              future: futureAlbum,
              builder: (context, snapshot) {
                List<Album>? albums = snapshot.data;
                return new ListView(
                    children: albums!
                        .map((album) => new Column(
                              children: <Widget>[
                                new Text(
                                  album.title,
                                  softWrap: true,
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.red),
                                ),
                              ],
                            ))
                        .toList());
                //show progressbar
                return const CircularProgressIndicator();
              }),
        ),
      ),
    );
  }
}
.....................................................................................					Navigation and Routing
.....................................................................................
Flutter provides  complete end to end for navigating between screens and handling routing.

There are two objects to handling routing in flutter

1.Navigator
   The Navigator is widget displays screens as a "stack" using the correct transition animation for the target platform.
  In order to navigate from screen to screen, we can access the Navigator object through the routes buildContext and call imperative methods such as push or pop.

Button or image or any element 

onPressed:() {
  Navigator.of(context).push(MaterialPageRoute(builder:(context)=>const WelcomeScreen())
}
Navigator keeps a stack of Route Object(representing the history stack),The push method also takes a Route object.

The MaterialPageRoute object is subclass of Route that specifies the transition animation for material design.


Named Routes:
 There is one more way to create routes called "named routes".

return MaterialApp(
 routes: {
    "/":(context)=>HomeScreen(),
   "/details":(context)=>DetailsScreen()

Using Router package:
  There is thrid party router package "go_router".

MaterialApp.router(
 routerConfig: GoRouter(){
   //configuratio
 }
)

You can use both Navigator and Router togther in the same screen.
....................................................................................
 			Navigate to a new screen and back to first screen
...................................................................................

Steps:

1.create two routes
2.Navigate to the second route using Navigator.push method
3.Return to the first screen using Navigator.pop method.


1.create two routes

//screen 1
class ScreenOne extends StatelessWidget {
  const ScreenOne({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Screen')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            //Navigate to second Route
          },
          child: const Text('Go'),
        ),
      ),
    );
  }
}

//screen 2
class ScreenTwo extends StatelessWidget {
  const ScreenTwo({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Second Screen')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            //Navigate to first Route
          },
          child: const Text('Go Back'),
        ),
      ),
    );
  }
}

2.Navigate to the second screen using Navigator.push
import 'package:flutter/material.dart';

//screen 1
class ScreenOne extends StatelessWidget {
  const ScreenOne({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Screen')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            //Navigate to second Route
            Navigator.push(context,
                MaterialPageRoute(builder: (context) => const ScreenTwo()));
          },
          child: const Text('Go'),
        ),
      ),
    );
  }
}

//screen 2
class ScreenTwo extends StatelessWidget {
  const ScreenTwo({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Second Screen')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            //Navigate to first Route
            Navigator.pop(context);
          },
          child: const Text('Go Back'),
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(title: 'Navigation demo', home: ScreenOne()));
}
.....................................................................................
				Named Routes
.....................................................................................

1.create two screens
2.define routes
3.Navigate to the second screen using Navigator.pushNamed()
4.Return first screen using Navigator.pop.

import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      title: 'Named Routes Demo',
      // Start the app with the "/" named route. In this case, the app starts
      // on the FirstScreen widget.
      initialRoute: '/',
      routes: {
        // When navigating to the "/" route, build the FirstScreen widget.
        '/': (context) => const FirstScreen(),
        // When navigating to the "/second" route, build the SecondScreen widget.
        '/second': (context) => const SecondScreen(),
      },
    ),
  );
}

class FirstScreen extends StatelessWidget {
  const FirstScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('First Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          // Within the `FirstScreen` widget
          onPressed: () {
            // Navigate to the second screen using a named route.
            Navigator.pushNamed(context, '/second');
          },
          child: const Text('Launch screen'),
        ),
      ),
    );
  }
}

class SecondScreen extends StatelessWidget {
  const SecondScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Second Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          // Within the SecondScreen widget
          onPressed: () {
            // Navigate back to the first screen by popping the current route
            // off the stack.
            Navigator.pop(context);
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}
.....................................................................................
			 How to pass data to a Screen
....................................................................................

This is going to help to build screen master detail page.

1.Define a todo class
2.Display list of todos
3.Create detail screen that can display information about a todo.
4.Navigate and pass data to the details screen.



1.Define a todo class

//step 1 : model class to hold data
class Todo {
  final String title;
  final String description;

  const Todo(this.title, this.description);
}

2.create a list of todos.

3.display list of todos using a ListView
class TodosScreen extends StatelessWidget {
  final List<Todo> todos;

  const TodosScreen({super.key, required this.todos});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Todos"),
      ),
      body: ListView.builder(
          itemCount: todos.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(todos[index].title),
            );
          }),
    );
  }
}

4.Details Screen
//Details Screen
class DetailsScreen extends StatelessWidget {
  final Todo todo;

  const DetailsScreen({super.key, required this.todo});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(todo.title)),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Text(todo.description),
      ),
    );
  }
}

Navigate and pass data to the details screen.
..............

Full code:
//step 1 : model class to hold data
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class Todo {
  final String title;
  final String description;

  const Todo(this.title, this.description);
}

//Step 2: Create Master Screen to display todos data.

class TodosScreen extends StatelessWidget {
  final List<Todo> todos;

  const TodosScreen({super.key, required this.todos});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Todos"),
      ),
      body: ListView.builder(
          itemCount: todos.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(todos[index].title),
              onTap: () {
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) =>
                            DetailsScreen(todo: todos[index])));
              },
            );
          }),
    );
  }
}
  
//Details Screen
class DetailsScreen extends StatelessWidget {
  final Todo todo;

  const DetailsScreen({super.key, required this.todo});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(todo.title)),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Text(todo.description),
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    title: 'MyTodo app',
    home: TodosScreen(
        todos: List.generate(
            20, (index) => Todo("Todo $index ", "Description of $index}"))),
  ));
}
.....................................................................................
			   Drawer
.....................................................................................

Steps:
 1.create a Material with Scaffold
 2.Add a Drawer
 3.Add items into drawer
 4.close the drawer programmetically.


Scaffold(
 drawer:...
)
 
Add drawer

Scaffold(
 drawer:Drawer(child:ListView())
)

How to add Drawer to a Screen:

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Drawer")),
      drawer: Drawer(),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Drawer',
      home: MyHomePage(title: 'title'),
    );
  }
}

Items into Drawer:
..................
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Drawer")),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
                decoration: BoxDecoration(color: Colors.blue),
                child: Text("Header")),
            ListTile(
              title: Text('Home'),
            ),
            ListTile(title: Text('Inbox')),
            ListTile(
              title: Text('Archive'),
            )
          ],
        ),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Drawer',
      home: MyHomePage(title: 'title'),
    );
  }
}

Add Listener to List items:
...........................
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Drawer")),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
                decoration: BoxDecoration(color: Colors.blue),
                child: Text("Header")),
            ListTile(
              title: Text('Home'),
              onTap: () {
                print("Home");
              },
            ),
            ListTile(
                title: Text('Inbox'),
                onTap: () {
                  print("Inbox");
                }),
            ListTile(
                title: Text('Archive'),
                onTap: () {
                  print("Archive");
                })
          ],
        ),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Drawer',
      home: MyHomePage(title: 'title'),
    );
  }
}
.....................................................................................
Drawer Navigation :

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  //to track item:
  int _selectedIndex = 0;

  //Listener
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
      print("Selected index $_selectedIndex");
    });
  }

  //To display dynamic widget when i click drawer item
  static const TextStyle optionStyle =
      TextStyle(fontSize: 30, fontWeight: FontWeight.bold);

  //
  static const List<Widget> _widgetOptions = <Widget>[
    Text('Index 0: Home', style: optionStyle),
    Text('Index 1: InBox', style: optionStyle),
    Text('Index 2: Archive', style: optionStyle)
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Drawer")),
      body: Center(
        child: _widgetOptions[_selectedIndex],
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
                decoration: BoxDecoration(color: Colors.blue),
                child: Text("Header")),
            ListTile(
              title: Text('Home'),
              onTap: () {
                print("Home");
                _onItemTapped(0);
                //close the drawer
                Navigator.pop(context);
              },
            ),
            ListTile(
                title: Text('Inbox'),
                onTap: () {
                  print("Inbox");
                  _onItemTapped(1);
                  Navigator.pop(context);
                }),
            ListTile(
                title: Text('Archive'),
                onTap: () {
                  print("Archive");
                  _onItemTapped(2);
                  Navigator.pop(context);
                })
          ],
        ),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Drawer',
      home: MyHomePage(title: 'title'),
    );
  }
}
.....................................................................................
			How to access platform sepcific Services
.....................................................................................

Any Mobile app , we need to access platform services like camera,contacts,storage,file system,location,etc......

Flutter does not provide any core apis to access platform services... rather flutter provides "plugins".

What is Plugin?
  Flutter plugin is the wrapper of the native code like android(kotlin or java) and ioS(switft or objective c)
 Plugin contains dart code which access low level services of the platform...

Plugin vs package:

 A package contains only dart code for eg: http
 Plugin contains both dart and navative code(kotlin,js,swift,c++)
...................................................................................
			   Persistence
.....................................................................................
How to store data into device file system/memory?

there are three ways to store data in flutter?

1.key-value on disk
2.files - read and write data into disk file
3.SQLite - In memory data base

Key-value :
 if you want to store small information of key-value, we can use thehre is plugin called "shared_preferences"

shared_preferences:
  Wraps platform-specific persistent storage for simple data (NSUserDefaults on iOS and macOS, SharedPreferences on Android, etc.). Data may be persisted to disk asynchronously, and there is no guarantee that writes will be persisted to disk after returning, so this plugin must not be used for storing critical data.

flutter pub add shared_preferences

apis: 
write api - set
read api  - get
remove api -remove
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shared Preferences',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _loadCounter();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Storage'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('You have pushed the button many times'),
            Text(
              "$_counter",
              style: Theme.of(context).textTheme.headlineMedium,
            )
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }

  //load the counter on startup
  void _loadCounter() async {
    //Get Shared Prefence Instance
    final preference = await SharedPreferences.getInstance();
    setState(() {
      _counter = (preference.getInt('counter') ?? 0);
    });
  }

  //adding counter into shared preference
  Future<void> _incrementCounter() async {
    final preference = await SharedPreferences.getInstance();
    setState(() {
      _counter = (preference.getInt('counter') ?? 0) + 1;
      preference.setInt("counter", _counter);
    });
  }
}
.....................................................................................
  







