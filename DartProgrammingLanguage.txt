			   Dart Programming language
.....................................................................................

What is Dart?
   Dart is object-oriented, class based, garbage collected language with c-style   syntax.
   Dart is Object oriented,functionaly style ,General Purpose programming language.
   Dart is strongly typed or static typed ,type inferenced Programming language

Strongly Typed(static typed): The type of variable is verified during compile time.
 -c,c++,java,kotlin,c# etc...

Dynamic Typed (weak Typed):The type of variable is not verified during compile time
-js,python etc...

Compiled code and dart;
.......................

if you take any programming language like java,kotlin,c or c++, when you compile you will get only one intermediate code(Assembly)

java/kotlin ---->compile----> .class(byte code)----Execute
c/c++ ----->compile-------->.obj( Plaftorm(os) Assembly)-------Execute


if you take dart programming language
                       | -----machine code(platform(os) specific assembly))
   dart code----compile| -----javascript 
                       | -----Web assembly

History of Dart:
................
 Dart was designed by Lars Bak and Kasper Lun at google.
 Dart was introduced at Goto conference in Denmark oct 2011, it was released in Nov  2013
 Dart was introduced initally to replace javascript and java script runtime inside  chrome, to embed Dart VM in chrome. Later the plan was dropped to introduce dart  runtime inside  chrome instead to convert dart code into js code.
 
Dart versions

dart 1.0 - first version
dart 1.9
dart 2.0
dart 2.6
dart 3.0
dart 3.X.X....

Types of apps and its Runtime of dart:
.....................................
 Dart Software development(SDK) ships with a standalone dart runtime.
 You can test language features cli environment.
 Dart provides standard libs for building apps


Dart Deployment types:

Deployement type  Target Platform Platform Specific Requries Dart VM
 Javascript         Browser         No                 NO
 Web Assembly       Browser         No                 NO
 Self-contained
 executatble      win,linux,mac     Yes                No
 AOT Module       win,linux,mac     Yes                No
 JIT Module       win,linux,mac     Yes                Yes
 Portable Module  win,linux,mac     NO                 Yes

Based on deployment types , dart can be used to build different types of apps
1.web app - js ,webassembly
2.native -desktop,mobile,tv
................................................................................
   			 Dart setup
..................................................................................

1.Dart SDK
2.IDE - vscode,IntellijIdea,AndroidStudio

Steps:
1.Get The Dart SDK
 1.1. Build from the source code : Get source code of the dart and build accordingly
       -this is only applicable linux.
 1.2.Docker image
 1.3.via Chocolatey 
 1.4.via dowloading the SDK as a zip file
 https://dart.dev/get-dart/archive

Via package managers  for all os
https://dart.dev/get-dart

Note: 

Download zip version and extract it
ADD  dart-sdk\bin in env variable

After installing , you can verify the dart installation.

open cmd prompt
dart --version
Dart SDK version: 3.1.2 (stable) (Tue Sep 12 16:26:23 2023 +0000) on "windows_x64"

Install IntelliJ IDEA Community Edition  or vs code.
.....................................................................................
			Dart Programming language Getting started


dart tool:
 It is used to create ,manage dart projects
-compilation,running...

>dart
A command-line utility for Dart development.

Usage: dart <command|dart-file> [arguments]

Global options:
-v, --verbose               Show additional command output.
    --version               Print the Dart SDK version.
    --enable-analytics      Enable analytics.
    --disable-analytics     Disable analytics.
    --suppress-analytics    Disallow analytics for this `dart *` run without changing the analytics configuration.
-h, --help                  Print this usage information.

Available commands:
  analyze    Analyze Dart code in a directory.
  compile    Compile Dart to various formats.
  create     Create a new Dart project.
  devtools   Open DevTools (optionally connecting to an existing application).
  doc        Generate API documentation for Dart projects.
  fix        Apply automated fixes to Dart source code.
  format     Idiomatically format Dart source code.
  info       Show diagnostic information about the installed tooling.
  pub        Work with packages.
  run        Run a Dart program.
  test       Run tests for a project.

Create Dart Project

dart create --help
Create a new Dart project.

Usage: dart create [arguments] <directory>
-h, --help                       Print this usage information.
-t, --template                   The project template to use.

          [console] (default)    A command-line application.
          [package]              A package containing shared Dart libraries.
          [server-shelf]         A server app using package:shelf.
          [web]                  A web app that uses only core Dart libraries.

    --[no-]pub                   Whether to run 'pub get' after the project has been created.
                                 (defaults to on)
    --force                      Force project generation, even if the target directory already exists.

Run "dart help" to see global options.

create command line project:
............................

dart create --template console myapp 
dart create myapp => Default template is console

dart create myapp
Creating myapp using template console...

  .gitignore
  analysis_options.yaml
  CHANGELOG.md
  pubspec.yaml
  README.md
  bin\myapp.dart
  lib\myapp.dart
  test\myapp_test.dart

Running pub get...
  Resolving dependencies...
  Changed 46 dependencies!

Created project myapp in myapp! In order to get started, run the following commands:

  cd myapp
  dart run

Folders and files:
...................

pubspec.yaml
   -Build script like package.json,pom.xml,gradle.build

name: myapp
description: A sample command-line application.
version: 1.0.0
# repository: https://github.com/my_org/my_repo

environment:
  sdk: ^3.1.2

# Add regular dependencies here.
dependencies:
  # path: ^1.8.0

dev_dependencies:
  lints: ^2.0.0
  test: ^1.21.0


test
  -Contains unit and integration testing files
lib
  -contains utility apis
bin
  -contains source of code app and entry point of dart application.

All dart programs are saved with "fileName.dart"

Every dart App must have entry point called "main"
.....................................................................................

coding style -c,c++,kotlin

General function syntax:
returnType functionname(){
   //body of the function
}
main function:

bin/myapp.dart
void main() {
  //code
  print("Hello Dart");
}

How to run dart program?

dart run  -->Will pick main program from the bin folder

dart run [options] [DART_FILE] [args]

E:\session\IBM\2023\Oct\DartAndFlutter\myapp>dart run
Building package executable...
Built myapp:myapp.
Hello Dart

E:\session\IBM\2023\Oct\DartAndFlutter\myapp>dart run bin/myapp.dart
Hello Dart

main function can take command line args'
........................................

void main(List<String> args) {
  print(args);
  print("Hello Dart with args");
}

E:\session\IBM\2023\Oct\DartAndFlutter\myapp>dart run bin/myapp.dart welcome how are you
[welcome, how, are, you]
Hello Dart with args
...................................................................................
			  Dart compilation

As we disucssed already, the dart code can be compiled into multiple formats.

dart compile --help
Compile Dart to various formats.

Usage: dart compile <subcommand> [arguments]
-h, --help    Print this usage information.

Available subcommands:
  aot-snapshot   Compile Dart to an AOT snapshot.
  exe            Compile Dart to a self-contained executable.
  jit-snapshot   Compile Dart to a JIT snapshot.
  js             Compile Dart to JavaScript.
  kernel         Compile Dart to a kernel snapshot.

Run "dart help" to see global options.

How to compile the dart code into platform specific(exe):
..........................................................

dart compile exe bin/myapp.dart
Generated: e:\session\ibm\2023\oct\dartandflutter\myapp\bin\myapp.exe

How to run compiled exe:
E:\session\IBM\2023\Oct\DartAndFlutter\myapp\bin>myapp.exe hello
[hello]
Hello Dart with args

How to compile the dart code into js:
....................................
dart compile js bin/myapp.dart

how to run compiled javascript?

you can run js code using browsers or node.js runtime.

Node:
E:\session\IBM\2023\Oct\DartAndFlutter\myapp>node out.js
[]
Hello Dart with args

Portable Modules(kernel): Platform independent;
..............................................
>dart compile kernel bin/myapp.dart
Compiling bin/myapp.dart to kernel file bin/myapp.dill.

How to run dart kernel module:
dart run bin/myapp.dill
[]
Hello Dart with args
....................................................................................

Learning Path:
1.Dart language fundamentals
2.Dart Object oriented programming
3.Dart functional programming 
4.Dart Async Programming
5.Datastructures and collections
6.Exception Handling

Language Fundamentals:

1.Variables
2.Type system
3.literals (values)

Variable declaration: Syntax 1

Type variableName = value(literal)

Type:
 Java,Js like languages has two types of datatypes
1.primitive types - int,float,char,boolean
2.reference types - object types

In Dart everything is object, no Primitive Types,Mostly Reference Types

Built in Types:
...............
1.Numbers   
    int,double
2.Strings (String)
3.Booleans (bool)

Advanced Types:
1.List
2.Set
3.Map
4.Symbol
5.Null
6.Records
7.Runes


Eg:
void main() {
  //declare variable
  int a = 10;
  double d = 10.5;

  print("int type" + a.toString());
  print("doubel type" + d.toString());
}


Variable declaration: Syntax 2

Type inference syntax: The type of variable is "understood" based on the value we assign

var variableName = value(literal)
void main() {
  //declare variable
  int a = 10;
  double d = 10.5;

  print("int type" + a.toString());
  print("doubel type" + d.toString());

  //type inference syntax
  var b = 10;
  var c = 134.78;
}

int:
 =>64 bit in case of native platform , in case if the code converted into js size    would be 64 bit floating point

double
 =>64 bit floating point in all platforms 

Note: type inference syntax is mostly recommended.
...................................................................................

Strings:
=>16 bit UTF-16 code units
=>You can use '' or ""
=>String concatnation can be done using + operator or string interploation.

String interploation is done using ${expression}
void main() {
  String str = 'Hello';
  var name = "Subramaian";
  //print values : Using + operator
  print("Name " + name);
  //using string interpolation
  print("Name ${name}");
  print("Name $name");

}

Multi line Strings:
....................
""" -triple quotes

void main() {
  String str = 'Hello';
  var name = "Subramaian";
  //print values : Using + operator
  print("Name " + name);
  //using string interpolation
  print("Name ${name}");
  print("Name $name");

  var html = """
       <html>
         <head>
        <title>Hello</title>
        </head>
        <body>
        <h1>Hello $name</h1>
        </body>
        </html>
  """;
  print(html);
}
.................................
Booleans:
=>1 bit value
=>true or false 

void main() {
  var isValid = true;
  var isEnabled = false;
  print("Is Valid $isValid");
  print("Is Enabled $isEnabled");
}
...................................................................................
			Variable reinitalization
..................................................................................

final and const:

 Instead of using var keyword we can use final or const

final :
  final j = 10;
  print("j $j");
  j = 33434;

compile time error:
10:3: Error: Can't assign to the final variable 'j'.
  j = 33434;

const:
   //const d = 10;
  const int d = 10;
  print("d $d");
  //d =90; - cant be reinitialized

const vs final:
..............
final variables can only be set once and it its intialzed when accessed : lazy
const variables are implicitly final but it is a compile time constant: eagar.

const are intialized during compile time 
final are intialized during runtime 

Testing: 
 How to know final is lazy, const is eager.

void main() {
  var i = 10;
  print("i $i");
  //reinitalize the variable
  i = 90;
  print("i $i");

  //without type: type inferenence
  //final j = 10;
  final int j = 10;
  print("j $j");
  //j = 33434;

  //const d = 10;
  const int d = 10;
  print("d $d");
  //d =90; //- cant be reinitialized
}
.....................................................................................
				 Null
....................................................................................

What is null?

  Null itself is value, Its type is Object.
  Null itslef is object.

History Of Null:

  In computing, a null pointer or null reference is a value saved for indicating that the pointer or reference does not refer to a valid object(value).

In 2009, Tony Hoare stated that he invented the null reference in 1965 as part of the ALGOL W language. 

In that 2009 reference Hoare describes his invention as a "billion-dollar mistake":

reference: https://en.wikipedia.org/wiki/Null_pointer

.....................................................................................
			How to handle Null?

"Null" Reference is unavoidable in any Object Oriented Systems like c++,java,C#,Kotlin etc...

Handling null is more challange

In java ,C++,C#, in these languages if you call any properties on null object meaning that the variable points null object, will throw error/Exception.

if exception happens , the program will be terminated with reporting.

In java:
 
 Employee emp=null;
 emp.id =1;

When you run this code you will get nullPointer Exception

Solution:
  if(emp!=null){
	emp.id=1
  }  
The above code might be duplicated across many places.

After java, many languages started thinking that how to safely handle null.

Dart and Null:
..............
Since Dart is  Object oriented, there is possiblity of null.

Can we declare null value to a variable?

void main(){
  int a = null;  
}

Yes and No, by default a variable cant hold "null".

What if i want to initalize null?

void main() {
  int? a = null;
  var b = null;
}
Note:
 with type annotation we have to use "?"
 with var keyword it is implicit.


when you declare a variable without initalizing any value

void main() {
   int c;
}
no compile time error.

Note:
 You must initialize the variable before using them. Value can be null or type releated value.

void main() {
  int? c;
  print("c $c");
}
Here c is implicitly assigned with null.
 
void main() {
  var d;
  print("d ${d}");
}

Here d is implicitly assigned with null 

Initallly you declare null and later you can reinitalize with values.

void main() {
  int? c;
  print("c $c");
  c =10;
  print("c $c");

  var d;
  print("d ${d}");
  c=20;
  print("d ${d}");

}

Property access on nullable object:
...................................

void main() {
  //String? name = "subramanian";
  String? name = null;
  print("Name $name");
  print("Name ${name.toUpperCase()}");
}

Compiler gives error
The method 'toUpperCase' can't be unconditionally invoked because the receiver can be 'null'

Solution:
Try making the call conditional (using '?.') or adding a null check to the target ('!') or test with if condition of not null.

 //solution -1
  if (name != null) {
    print("Name ${name.toUpperCase()}");
  }

Solution 2
print("Name ${name?.toUpperCase()}");

Solution 3:
 print("Name2 ${name!.toUpperCase()}");

.....................................................................................
				Late variables
.....................................................................................

late modifier has two use cases

1.Declaring non nullable variable that is initalized after its declaration
2.Lazily initializing variable : during runtime.

//Script variables
//String name = "Subramanian";
//Script variables
//String name = "Subramanian";
late String name;

void main() {
  name = "Subramanian";
  late String city;
  print(name);
  city="Coimbatore";
  print(city);
}

if you fail to initialize a late variable, a runtime error occurs when the variable is used.

late String name="something";

when you mark a variable as late but initalize it at its declaration, then the initializer runs the first the variable is used.
....................................................................................
				Operators
....................................................................................

Most of the operators are dervided c and c++,java 

Arithmetic Operators:
+,-,-expersion(unary),* , /, ~/(div return int as res),% 

void main() {
  var x = 10;
  var y = 2;
  print("Add ${x + y}");
  print("Subtract ${x - y}");
  print("Multiply ${x * y}");
  print("Div ${x / y}");
  print("Remainder ${x % y}");

}
Equality and Relational operators:

== 
!=
>
<
>=
<=
void main() {
  var x = 10;
  var y = 20;
  var c = x == y;
  print("c $c");
}

Type Test Operators:
...................
Checking data type of variable during runtime

as - Type cast operator.
is - True if the object has specified type
is! - true if the object does not have the specified type.

void main() {
  int a = 10;
  print("${a is int}");
}

Assignment operators

=
*=,+=,%=
??=

//Assign value to b if  b is null other wise b stays the same
b??=value

void main() {
  int? a = null;
  a ??= 0;
  print("a $a");
}

Logical Operators:

! - not
&& - And
|| - OR

Conditional Expressions (tenary)
...............................
=> condition ? expr1 : expr2
    if condition is true, evaluates expr1 other wise expr
=> expr1 ?? expr2
   if expr1 is non null return its null, otherwise evaluates and returns value of expr

void main() {
  var isValid = true;
  var result = isValid ? "Valid" : "InValid";
  print("result $result");

  var name;
  var res = name ?? "Subramanian";
  print("Name is $res");
}
............
Cascade Operators: to be discussed in oo.

Other Operators:
................
() - function application operator
[] - subscript operator
?[] - conditional subscript
. - Member access operator
?. - conditional Member access
! -Null assertion opertor
....................................................................................
				Functions
....................................................................................

Dart is a true object-oriented language, so even functions also Objects and has type, "Function".

How to declare functions?

returnType funName(args) {
  //function body
  return statement
}

//declaration
void sayHello() {
  print("Hello");
}

void sayHai() {
  print("hai");
}

//main function
void main() {
  //invocation
  sayHello();
  //
  sayHai();
}

Function Parameters and Args:
.............................

void add(int a, int b) {
  int c = a + b;
  print("C $c");
}

void calculate(var a, var b) {
  int c = a * b;
  print("c $c}");
}

void main() {
  add(10, 10);
  calculate(10, 10);
  calculate("12", "10");
}

Note:

 Function args are declared with type - strong typing , so that we can only pass that only specific type - if you pass different types, you get compile time error.

void add(int a, int b) {
  int c = a + b;
  print("C $c");
}
add(10, 10);

 Function args are declared with "var" - dynamic typing , so that we can  pass that  any  type - if you pass different types, you wont get compile time error.
 There is possiblity it causes runtime error.
....................................................................................

Args and null : nullable args:
................................

void sayHello(String? name) {
  var res = name ?? "Your Name";
  print("$res");
}

void main() {
  sayHello("Subramanian");
  sayHello(null);
}
..................................................................................

Function Parameters:

1.Named parameters

Named parameters must be enclosed in curly braces ('{' and '}').
When we use Named parameters , we can initalize the  variables with default values, so that we can omit those variables.

Named Optional Parameters:
 => we we defining function, use {param1,param2...} to specify named parameters
 => we we calling functoin you can specifiy the parameter name:value, if you want you     can even skip (optional Parameters)

void sayName({String? name = "Your Name"}) {
  print("Name is $name");
}

void main() {
  sayName(name: "Subramanian");
  sayName();
}

void sayName({String? name = "Your Name"}) {
  print("Name is $name");
}

void widget(
    {String? name = "Layout",
    int? height = 0,
    int? width = 0,
    String? theme = "light"}) {
  print("name $name");
  print("height $height");
  print("width $width");
  print("theme $theme");
}

void main() {
  sayName(name: "Subramanian");
  sayName();
  //widget(name, height, width, theme);
  widget();
  widget(name: "Tab", theme: "dark");
  widget(name: "Panel", width: 100, height: 200, theme: "light");
}

...........................................................................

Named and Required Parameters:
.............................
void httpClient(
    {required String? url,
    String? method = "GET",
    required String? payload,
    String? headers = "headers"}) {
  print("url $url");
  print("method $method");
  print("payload $payload");
  print("headers $headers");
}

void main() {
  httpClient(url: "http://www.mockapi.com/users", payload: "Users");
  httpClient(url: "http://www.mockapi.com/users", payload: "Users",method: "POST");

}
....................................................................................

Positional Parameters:
......................
 General Function args are Positional.

void sendMail(String from, String to, String msg) {
  print("From $from");
  print("To $to");
  print("Message $msg");
}

void main() {
  sendMail("admin@ibm.com", "foo@ibm.com", "You got a mail");
}

Postional Optional Parameter:
.............................
Wrapping a set of function parameters in [] marks them as optional positional parameter. if you dont provide default value, their type would be null.

void sendMail(String? from, String? to, String? msg, [String? device="Mobile"]) {
  print("From $from");
  print("To $to");
  print("Message $msg");
  print("Device $device");
}

void main() {
  sendMail("admin@ibm.com", "foo@ibm.com", "You got a mail");
  sendMail(null, null, null);
  sendMail("admin@ibm.com", "foo@ibm.com", "You got a mail","Computer");
}
...................................................................................
			Return Type
....................................................................................

Function can return any type and also can return "void"
No return statement means , by default void.

void :
// void sayHello(){
//   print("hello");
//   return;
// }
sayHello() {
  print("hello");
  return;
}

main() {
  sayHello();
}
Note: you can even remove void keyword.

// void sayHello(){
//   print("hello");
//   return;
// }
sayHello() {
  print("hello");
  return;
}

int add({int? a = 0, int? b = 0}) {
  return a! + b!;
}

main() {
  sayHello();
  print(add());
  //print(add(a:null,b:null));
  print(add(a: 3, b: 4));
}
..................................................................................
			Control Flow - Loops and Branches
..................................................................................
Loops:
 -for
 -while and do while
 -break and continue

Branching:
  if and switch
  Exceptions- try,catch,and throw.


Loops:
void main() {
  //Loops - for
  for (int i = 0; i < 5; i++) {
    print("i $i");
  }
  for (var i = 0; i < 5; i++) {
    print("i $i");
  }
  // for (final i = 0; i < 5; i++) {
  //   print("i $i");
  // }
  var i = 100;
  while (i > 10) {
    print("while $i");
    i++;
  }
}

Break and Continue:
while(true){
 if(condition) break;
}
...............

Branches:
1.if statements -  if , if..else, if..elseif..else
2.if..case statement
3.switch case statement and expressions


if...
main() {
  //if...else
  var salary = 15000;
  if (salary > 20000) {
    print("Good Salary");
  } else {
    print("You need more ");
  }
  //if else if
  var marks = 80;
  if (marks >= 90 && marks < 100) {
    print("A +");
  } else if (marks >= 80 && marks < 90) {
    print("A");
  } else {
    print("No grade");
  }
}

if...case: We can see later after pattern matching concept
..
........................................

Switch:
 Switch Statement
 Switch Expressions

main() {
  String grade = 'A';
  switch (grade) {
    case 'A':
      print("Excellent");
      break;
    case 'B':
      print("Very Good");
      break;
    case 'C':
      print("Good");
      break;
    default:
      print("No Grade is found");
  }
}
.....

Switch Expressions:
  A Switch expression produces a value based on the expression body of whichever case catches.

eg:

 var r = switch(x) {}
 print(switch(x){});
 return switch(x){};

int getDayofWeek(String dayOfWeek) {
  return switch (dayOfWeek) {
    'Monday' => 1,
    'Tuesday' => 2,
    'Wednesday' => 3,
    'Thursday' => 4,
    'Friday' => 5,
    'Saturday' => 6,
    'Sunday' => 7,
    _ => 10
  };
}

void main() {
  var dayOfWeek = 'Monday';
  var result = switch (dayOfWeek) {
    'Monday' => 1,
    'Tuesday' => 2,
    'Wednesday' => 3,
    'Thursday' => 4,
    'Friday' => 5,
    'Saturday' => 6,
    'Sunday' => 7,
    _ => 10
  };
  print("$result");
  print(getDayofWeek("Friday"));
}

Differences between switch statement and switch expressions:

1.cases do not start with const keyword
2.a case body must be single expression of a series of empty cases
3.each must have body;
4.case patterns must be separated by => instead of ":"
5.default case is replaced by "_" 
.....................................................................................
			 Functional Programming in Dart
....................................................................................


