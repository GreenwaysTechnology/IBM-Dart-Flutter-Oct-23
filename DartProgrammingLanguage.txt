			   Dart Programming language
.....................................................................................

What is Dart?
   Dart is object-oriented, class based, garbage collected language with c-style   syntax.
   Dart is Object oriented,functionaly style ,General Purpose programming language.
   Dart is strongly typed or static typed ,type inferenced Programming language

Strongly Typed(static typed): The type of variable is verified during compile time.
 -c,c++,java,kotlin,c# etc...

Dynamic Typed (weak Typed):The type of variable is not verified during compile time
-js,python etc...

Compiled code and dart;
.......................

if you take any programming language like java,kotlin,c or c++, when you compile you will get only one intermediate code(Assembly)

java/kotlin ---->compile----> .class(byte code)----Execute
c/c++ ----->compile-------->.obj( Plaftorm(os) Assembly)-------Execute


if you take dart programming language
                       | -----machine code(platform(os) specific assembly))
   dart code----compile| -----javascript 
                       | -----Web assembly

History of Dart:
................
 Dart was designed by Lars Bak and Kasper Lun at google.
 Dart was introduced at Goto conference in Denmark oct 2011, it was released in Nov  2013
 Dart was introduced initally to replace javascript and java script runtime inside  chrome, to embed Dart VM in chrome. Later the plan was dropped to introduce dart  runtime inside  chrome instead to convert dart code into js code.
 
Dart versions

dart 1.0 - first version
dart 1.9
dart 2.0
dart 2.6
dart 3.0
dart 3.X.X....

Types of apps and its Runtime of dart:
.....................................
 Dart Software development(SDK) ships with a standalone dart runtime.
 You can test language features cli environment.
 Dart provides standard libs for building apps


Dart Deployment types:

Deployement type  Target Platform Platform Specific Requries Dart VM
 Javascript         Browser         No                 NO
 Web Assembly       Browser         No                 NO
 Self-contained
 executatble      win,linux,mac     Yes                No
 AOT Module       win,linux,mac     Yes                No
 JIT Module       win,linux,mac     Yes                Yes
 Portable Module  win,linux,mac     NO                 Yes

Based on deployment types , dart can be used to build different types of apps
1.web app - js ,webassembly
2.native -desktop,mobile,tv
................................................................................
   			 Dart setup
..................................................................................

1.Dart SDK
2.IDE - vscode,IntellijIdea,AndroidStudio

Steps:
1.Get The Dart SDK
 1.1. Build from the source code : Get source code of the dart and build accordingly
       -this is only applicable linux.
 1.2.Docker image
 1.3.via Chocolatey 
 1.4.via dowloading the SDK as a zip file
 https://dart.dev/get-dart/archive

Via package managers  for all os
https://dart.dev/get-dart

Note: 

Download zip version and extract it
ADD  dart-sdk\bin in env variable

After installing , you can verify the dart installation.

open cmd prompt
dart --version
Dart SDK version: 3.1.2 (stable) (Tue Sep 12 16:26:23 2023 +0000) on "windows_x64"

Install IntelliJ IDEA Community Edition  or vs code.
.....................................................................................
			Dart Programming language Getting started


dart tool:
 It is used to create ,manage dart projects
-compilation,running...

>dart
A command-line utility for Dart development.

Usage: dart <command|dart-file> [arguments]

Global options:
-v, --verbose               Show additional command output.
    --version               Print the Dart SDK version.
    --enable-analytics      Enable analytics.
    --disable-analytics     Disable analytics.
    --suppress-analytics    Disallow analytics for this `dart *` run without changing the analytics configuration.
-h, --help                  Print this usage information.

Available commands:
  analyze    Analyze Dart code in a directory.
  compile    Compile Dart to various formats.
  create     Create a new Dart project.
  devtools   Open DevTools (optionally connecting to an existing application).
  doc        Generate API documentation for Dart projects.
  fix        Apply automated fixes to Dart source code.
  format     Idiomatically format Dart source code.
  info       Show diagnostic information about the installed tooling.
  pub        Work with packages.
  run        Run a Dart program.
  test       Run tests for a project.

Create Dart Project

dart create --help
Create a new Dart project.

Usage: dart create [arguments] <directory>
-h, --help                       Print this usage information.
-t, --template                   The project template to use.

          [console] (default)    A command-line application.
          [package]              A package containing shared Dart libraries.
          [server-shelf]         A server app using package:shelf.
          [web]                  A web app that uses only core Dart libraries.

    --[no-]pub                   Whether to run 'pub get' after the project has been created.
                                 (defaults to on)
    --force                      Force project generation, even if the target directory already exists.

Run "dart help" to see global options.

create command line project:
............................

dart create --template console myapp 
dart create myapp => Default template is console

dart create myapp
Creating myapp using template console...

  .gitignore
  analysis_options.yaml
  CHANGELOG.md
  pubspec.yaml
  README.md
  bin\myapp.dart
  lib\myapp.dart
  test\myapp_test.dart

Running pub get...
  Resolving dependencies...
  Changed 46 dependencies!

Created project myapp in myapp! In order to get started, run the following commands:

  cd myapp
  dart run

Folders and files:
...................

pubspec.yaml
   -Build script like package.json,pom.xml,gradle.build

name: myapp
description: A sample command-line application.
version: 1.0.0
# repository: https://github.com/my_org/my_repo

environment:
  sdk: ^3.1.2

# Add regular dependencies here.
dependencies:
  # path: ^1.8.0

dev_dependencies:
  lints: ^2.0.0
  test: ^1.21.0


test
  -Contains unit and integration testing files
lib
  -contains utility apis
bin
  -contains source of code app and entry point of dart application.

All dart programs are saved with "fileName.dart"

Every dart App must have entry point called "main"
.....................................................................................

coding style -c,c++,kotlin

General function syntax:
returnType functionname(){
   //body of the function
}
main function:

bin/myapp.dart
void main() {
  //code
  print("Hello Dart");
}

How to run dart program?

dart run  -->Will pick main program from the bin folder

dart run [options] [DART_FILE] [args]

E:\session\IBM\2023\Oct\DartAndFlutter\myapp>dart run
Building package executable...
Built myapp:myapp.
Hello Dart

E:\session\IBM\2023\Oct\DartAndFlutter\myapp>dart run bin/myapp.dart
Hello Dart

main function can take command line args'
........................................

void main(List<String> args) {
  print(args);
  print("Hello Dart with args");
}

E:\session\IBM\2023\Oct\DartAndFlutter\myapp>dart run bin/myapp.dart welcome how are you
[welcome, how, are, you]
Hello Dart with args
...................................................................................
			  Dart compilation

As we disucssed already, the dart code can be compiled into multiple formats.

dart compile --help
Compile Dart to various formats.

Usage: dart compile <subcommand> [arguments]
-h, --help    Print this usage information.

Available subcommands:
  aot-snapshot   Compile Dart to an AOT snapshot.
  exe            Compile Dart to a self-contained executable.
  jit-snapshot   Compile Dart to a JIT snapshot.
  js             Compile Dart to JavaScript.
  kernel         Compile Dart to a kernel snapshot.

Run "dart help" to see global options.

How to compile the dart code into platform specific(exe):
..........................................................

dart compile exe bin/myapp.dart
Generated: e:\session\ibm\2023\oct\dartandflutter\myapp\bin\myapp.exe

How to run compiled exe:
E:\session\IBM\2023\Oct\DartAndFlutter\myapp\bin>myapp.exe hello
[hello]
Hello Dart with args

How to compile the dart code into js:
....................................
dart compile js bin/myapp.dart

how to run compiled javascript?

you can run js code using browsers or node.js runtime.

Node:
E:\session\IBM\2023\Oct\DartAndFlutter\myapp>node out.js
[]
Hello Dart with args

Portable Modules(kernel): Platform independent;
..............................................
>dart compile kernel bin/myapp.dart
Compiling bin/myapp.dart to kernel file bin/myapp.dill.

How to run dart kernel module:
dart run bin/myapp.dill
[]
Hello Dart with args
....................................................................................

Learning Path:
1.Dart language fundamentals
2.Dart Object oriented programming
3.Dart functional programming 
4.Dart Async Programming
5.Datastructures and collections
6.Exception Handling

Language Fundamentals:

1.Variables
2.Type system
3.literals (values)

Variable declaration: Syntax 1

Type variableName = value(literal)

Type:
 Java,Js like languages has two types of datatypes
1.primitive types - int,float,char,boolean
2.reference types - object types

In Dart everything is object, no Primitive Types,Mostly Reference Types

Built in Types:
...............
1.Numbers   
    int,double
2.Strings (String)
3.Booleans (bool)

Advanced Types:
1.List
2.Set
3.Map
4.Symbol
5.Null
6.Records
7.Runes


Eg:
void main() {
  //declare variable
  int a = 10;
  double d = 10.5;

  print("int type" + a.toString());
  print("doubel type" + d.toString());
}


Variable declaration: Syntax 2

Type inference syntax: The type of variable is "understood" based on the value we assign

var variableName = value(literal)
void main() {
  //declare variable
  int a = 10;
  double d = 10.5;

  print("int type" + a.toString());
  print("doubel type" + d.toString());

  //type inference syntax
  var b = 10;
  var c = 134.78;
}

int:
 =>64 bit in case of native platform , in case if the code converted into js size    would be 64 bit floating point

double
 =>64 bit floating point in all platforms 

Note: type inference syntax is mostly recommended.
...................................................................................

Strings:
=>16 bit UTF-16 code units
=>You can use '' or ""
=>String concatnation can be done using + operator or string interploation.

String interploation is done using ${expression}
void main() {
  String str = 'Hello';
  var name = "Subramaian";
  //print values : Using + operator
  print("Name " + name);
  //using string interpolation
  print("Name ${name}");
  print("Name $name");

}

Multi line Strings:
....................
""" -triple quotes

void main() {
  String str = 'Hello';
  var name = "Subramaian";
  //print values : Using + operator
  print("Name " + name);
  //using string interpolation
  print("Name ${name}");
  print("Name $name");

  var html = """
       <html>
         <head>
        <title>Hello</title>
        </head>
        <body>
        <h1>Hello $name</h1>
        </body>
        </html>
  """;
  print(html);
}
.................................
Booleans:
=>1 bit value
=>true or false 

void main() {
  var isValid = true;
  var isEnabled = false;
  print("Is Valid $isValid");
  print("Is Enabled $isEnabled");
}
...................................................................................
			Variable reinitalization
..................................................................................

final and const:

 Instead of using var keyword we can use final or const

final :
  final j = 10;
  print("j $j");
  j = 33434;

compile time error:
10:3: Error: Can't assign to the final variable 'j'.
  j = 33434;

const:
   //const d = 10;
  const int d = 10;
  print("d $d");
  //d =90; - cant be reinitialized

const vs final:
..............
final variables can only be set once and it its intialzed when accessed : lazy
const variables are implicitly final but it is a compile time constant: eagar.

const are intialized during compile time 
final are intialized during runtime 

Testing: 
 How to know final is lazy, const is eager.

void main() {
  var i = 10;
  print("i $i");
  //reinitalize the variable
  i = 90;
  print("i $i");

  //without type: type inferenence
  //final j = 10;
  final int j = 10;
  print("j $j");
  //j = 33434;

  //const d = 10;
  const int d = 10;
  print("d $d");
  //d =90; //- cant be reinitialized
}
.....................................................................................














